{
  "name": "responsive-database-manager",
  "version": "0.6.5",
  "description": "A database manager that responds to changes in schema, whilst the host application is still running.",
  "main": "responsive-database-manager.js",
  "dependencies": {
    "lodash-node": "~2.4.1",
    "mongoose": "3.8.2",
    "shelljs": "^0.3.0"
  },
  "devDependencies": {},
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/atcwells/responsive-database-manager.git"
  },
  "author": {
    "name": "Alex Wells"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/atcwells/responsive-database-manager/issues"
  },
  "homepage": "https://github.com/atcwells/responsive-database-manager",
  "readme": "responsive-database-manager\n===========================\n\nA Mongoose database interface that is created per JSON specs, and responds to changes to those specifications properly.\n\n## Contents\n\n * [Example Usage](#example_usage)\n * [Features](#features)\n * [Events](#events)\n\n## Example Usage\n\n1. [Install MongoDB](http://docs.mongodb.org/manual/installation/)\n\n## Features\n\nThis module is used extensively within a particular parent project. For this reason, a fair few decisions have been made which may not match other requirements. I've attempted to outline these decisions here:\n\n### Mandatory Properties\n\nA JSON file containing properties which are mandatory, and their default values. If a new field is added without one of these properties, it will be added with the default value.\n\n### Mandatory Fields\n\nA JSON file containing fields which are mandatory. These fields will be automatically added to new schema should the schema not already contain the fields.\n\n### Field Types\n\nA JSON file containing mappings between subtle types and Mongoose types. With this, you can create complex types to support better validation, but storing the data properly within Mongoose. For example:\n\n    \"email\": \"string\",\n\nan email type can be interpreted differently by the browser, server, but Mongoose will still store as a String type.\n\n### Getters/Setters/Validators/Defaults\n\nJavascript files containing functions used to perform operations against data. For example:\n\n    module.exports = {\n      password : function(value) {\n        return \"●●●●●●●●\";\n      }\n    }\n\nThe above will be applied to password type fields (see Field Types - this is actually a String) in the Getters property, and thus all passwords retrieved from the database will read '●●●●●●●●' instead of their actual value.\n\n### Schemas stored as JSON\n\nAll schema are stored as JSON files, converted using mongoose-gen, to which I owe great thanks. They contain a property called 'name', and a map called 'fields', which contains all the information required, but at a minimum contains the fields within Mandatory Properties.\n\n## Events\n\nChanges to `mandatory_properties` file:\n\n  - ensure all mandatory_fields have new property\n\n  - ensure all schemas have new property\n\n  - if removing, do nothing.\n\nChanges to `mandatory_fields` file:\n\n  - ensure new mandatory field has all mandatory properties.\n\nChanges to `field_types` file:\n  - if removing, set all schemafields with matching field_type to 'string'\n\nChanges to `defaults`/`getters`/`setters`/`validators` files:\n\n  - update mongoose's settings so that new file is used.\n\n  - reload all schemas?\n\nChanges to `schema` files:\n\n  - reload schema completely.\n",
  "readmeFilename": "README.md",
  "_id": "responsive-database-manager@0.6.5",
  "dist": {
    "shasum": "462da0f0934746aa961963edf2eb341ef1a10f4b"
  },
  "_from": "responsive-database-manager@0.6.5",
  "_resolved": "https://registry.npmjs.org/responsive-database-manager/-/responsive-database-manager-0.6.5.tgz"
}
